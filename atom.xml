<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wisdom的博客</title>
  
  <subtitle>乐生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wisdomwzz.github.io/"/>
  <updated>2018-04-28T01:45:20.000Z</updated>
  <id>https://wisdomwzz.github.io/</id>
  
  <author>
    <name>Wisdom</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://wisdomwzz.github.io/2018/04/30/Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%88GC%EF%BC%89%E6%9C%BA%E5%88%B6/"/>
    <id>https://wisdomwzz.github.io/2018/04/30/Java垃圾回收（GC）机制/</id>
    <published>2018-04-30T07:32:45.315Z</published>
    <updated>2018-04-28T01:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java垃圾回收（GC）机制"><a href="#Java垃圾回收（GC）机制" class="headerlink" title="Java垃圾回收（GC）机制"></a>Java垃圾回收（GC）机制</h1><h3 id="哪些内存需要回收"><a href="#哪些内存需要回收" class="headerlink" title="哪些内存需要回收"></a>哪些内存需要回收</h3><p>哪些内存需要回收是垃圾回收机制第一个要考虑的问题，所谓“要回收的垃圾”无非就是那些不可能再被任何途径使用的对象。那么如何找到这些对象？</p><p>1、<strong>引用计数法</strong></p><p>这个算法的实现是，给对象中添加一个引用计数器，每当一个地方引用这个对象时，计数器值+1；当引用失效时，计数器值-1。任何时刻计数值为0的对象就是不可能再被使用的。这种算法使用场景很多，但是，Java中却没有使用这种算法，因为这种算法很难解决对象之间相互引用的情况。</p><p>2、<strong>可达性分析法</strong></p><p>这个算法的基本思想是通过一系列称为“GC Roots”的对象作为起始点，从这些节点向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链（即GC Roots到对象不可达）时，则证明此对象是不可用的。在Java语言中可以作为GC Roots的对象包括：</p><ul><li>虚拟机栈中引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即Native方法）引用的对象</li></ul><p>3、四种引用状态</p><ul><li><p><strong>强引用</strong>：代码中普遍存在的类似”Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象</p></li><li><p><strong>软引用</strong>：描述有些还有用但并非必需的对象。在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围进行二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。Java中的类SoftReference表示软引用</p></li><li><p><strong>弱引用</strong>：描述非必需对象。被弱引用关联的对象只能生存到下一次垃圾回收之前，垃圾收集器工作之后，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。Java中的类WeakReference表示弱引用</p></li><li><p><strong>虚引用</strong>：这个引用存在的唯一目的就是在这个对象被收集器回收时收到一个系统通知，被虚引用关联的对象，和其生存时间完全没关系。Java中的类PhantomReference表示虚引用</p><p><strong>以上四种引用强度依次递减。</strong></p></li></ul><p>###垃圾回收算法</p><p>1、标记-清除（Mark-Sweep）算法</p><p>​    这是最基础的算法，标记-清除算法就如同它的名字样，分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，标记完成后统一回收所有被标记的对象。这种算法的不足主要体现在效率和空间，从效率的角度讲，标记和清除两个过程的效率都不高；从空间的角度讲，标记清除后会产生大量不连续的内存碎片， 内存碎片太多可能会导致以后程序运行过程中在需要分配较大对象时，无法找到足够的连续内存而不得不提前触发一次垃圾收集动作。标记-清除算法执行过程如图：<br><img src="https://img-blog.csdn.net/20180428094434779?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxMTUwODY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>2、复制（Copying）算法</p><p>​    复制算法是为了解决效率问题而出现的，<strong>它将可用的内存分为两块，每次只用其中一块，当这一块内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已经使用过的内存空间一次性清理掉</strong>。这样每次只需要对整个半区进行内存回收，内存分配时也不需要考虑内存碎片等复杂情况，只需要移动指针，按照顺序分配即可。复制算法的执行过程如图：<br><img src="https://img-blog.csdn.net/20180428094450720?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxMTUwODY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>3、标记-整理（Mark-Compact）算法</p><p>​    复制算法在对象存活率较高的场景下要进行大量的复制操作，效率很低。万一对象100%存活，那么需要有额外的空间进行分配担保。老年代都是不易被回收的对象，对象存活率高，因此一般不能直接选用复制算法。根据老年代的特点，有人提出了另外一种标记-整理算法，过程与标记-清除算法一样，不过不是直接对可回收对象进行清理，而是让所有存活对象都向一端移动，然后直接清理掉边界以外的内存。标记-整理算法的工作过程如图：<br><img src="https://img-blog.csdn.net/20180428094509704?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIxMTUwODY1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>4、分代收集</p><p>​    现代商用虚拟机基本都采用<strong>分代收集算法</strong>来进行垃圾回收。这种算法没什么特别的，无非是上面内容的结合罢了，根据对象的生命周期的不同将内存划分为几块，然后根据各块的特点采用最适当的收集算法。大批对象死去、少量对象存活的，使用复制算法，复制成本低；对象存活率高、没有额外空间进行分配担保的，采用标记-清理算法或者标记-整理算法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java垃圾回收（GC）机制&quot;&gt;&lt;a href=&quot;#Java垃圾回收（GC）机制&quot; class=&quot;headerlink&quot; title=&quot;Java垃圾回收（GC）机制&quot;&gt;&lt;/a&gt;Java垃圾回收（GC）机制&lt;/h1&gt;&lt;h3 id=&quot;哪些内存需要回收&quot;&gt;&lt;a href
      
    
    </summary>
    
    
  </entry>
  
</feed>
